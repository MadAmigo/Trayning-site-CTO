{"version":3,"file":"static/js/220.e825961d.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/profile.module.css?d84e","components/Profile/ProfileInputFields/ProfileInput.js","components/Profile/ProfileInputFields/Profile.js","components/Profile/ProfilePhoto/UpdataPhotoInput.js","components/Profile/ProfilePhoto/ProfilePhoto.js","components/Profile/Status/StatusRef.js","Common/withAuthRedirect.js","components/Profile/ProfileContainer.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"profile_profile__h64AE\",\"profilePhoto\":\"profile_profilePhoto__GmtcI\",\"button\":\"profile_button__N95er\",\"lookingForAJobDescription\":\"profile_lookingForAJobDescription__XuqYS\",\"contacts_item\":\"profile_contacts_item__BkDT+\",\"profilePhoto_button\":\"profile_profilePhoto_button__DK5fe\",\"field_LookingForAJobDescription\":\"profile_field_LookingForAJobDescription__qT9+F\",\"statusInputForm\":\"profile_statusInputForm__LQsxh\",\"updataPhotoInput_button\":\"profile_updataPhotoInput_button__9EC+V\"};","import React  from 'react'\r\nimport  s from '../profile.module.css'\r\nimport {InputFormModel, TextAreaFormModel} from '../../../Common/Form FieldModels.js'\r\nimport {Field, reduxForm} from 'redux-form'\r\n\r\nconst ProfileInputFields =(props) => {\r\n\treturn(\r\n <form onSubmit={props.handleSubmit} className={s.profileInputForm}>\r\n \t\t <div className={s.field}>\r\n            <Field\r\n                name=\"aboutMe\"\r\n                type=\"text\"\r\n                component={InputFormModel}\r\n                label=\"AboutMe\"\r\n             />\r\n        </div>\r\n \t\t <div className={s.field}>\r\n        \t<Field\r\n                name=\"fullName\"\r\n                type=\"text\"\r\n                component={InputFormModel}\r\n                label=\"FullName\"        \r\n           />\r\n        </div>\r\n        <div className={s.field}>\r\n        \t<Field\r\n\t\t        name=\"lookingForAJob\"\r\n\t\t        type=\"checkbox\"\r\n\t\t        component={InputFormModel}\r\n\t\t        label=\"lookingForAJob\"        \r\n    \t    />\r\n        </div>\r\n        <div className={s.field_LookingForAJobDescription}>\r\n        \t<Field\r\n\t\t        name=\"lookingForAJobDescription\"\r\n\t\t        type=\"text\"\r\n\t\t        component={TextAreaFormModel}\r\n\t\t        label=\"LookingForAJobDescription\"      \r\n     \t\t/>\r\n        \t\r\n        </div>\r\n        <div className={s.contacts}>\r\n\t\t\tcontacts:\r\n\t\t\t{Object.keys(props.dataClientProfile.contacts).map(key=>\r\n\t\t\t\t<div key={key} className={s.contacts_item}>\r\n                \t<Field\r\n                        name={'contacts.' + key}\r\n                        type=\"text\"\r\n                        component={InputFormModel}\r\n                        label={key}      \r\n                    />\r\n                </div>)}\r\n\t\t</div>\r\n        <div className={s.field}>\r\n        \t<button  type='submit'        \t\r\n        \tclassName={s.profilePhoto_button} >Set new profile</button>  \t\r\n        </div>\r\n     </form>\r\n\t)\r\n}\r\nconst ProfileInput = reduxForm({form:'profileInput', enableReinitialize: true})(ProfileInputFields);\r\nexport default ProfileInput;","import React, { memo } from 'react'\r\nimport  s from '../profile.module.css'\r\nimport Preloader from '../../../Common/Preloader/Preloader.js'\r\nimport ProfileInput from './ProfileInput.js'\r\n\r\nconst Profile = memo((props) =>{\r\n//const sendSelectedPhoto=(event)=>{props.updataPhoto(event.target.files[0])} // version without component\r\n\tif(!props.dataClientProfile) return (<Preloader />)\r\n\t\treturn(\r\n\t\t<div >\t\r\n\t\t\t{!props.editMode&&\r\n\t\t\t\t<div className={s.profile}>\r\n\t\t\t\t\t\t<div className={s.fullName}>\r\n\t\t\t\t\t\t\tfullName:      <span> {props.dataClientProfile.fullName}</span>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className={s.fullName}>\r\n\t\t\t\t\t\t\tlookingForAJob: {props.dataClientProfile.lookingForAJob?\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" onChange={()=>{}} checked=\"checked\" />\r\n\t\t\t\t\t\t\t:<input type=\"button\"  className={s.button} />}\r\n\t\t\t     \r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className={s.fullName}>\r\n\t\t\t\t\t\t\tlookingForAJobDescription: <div className={s.lookingForAJobDescription} >\r\n\t\t\t\t\t\t\t{String(props.dataClientProfile.lookingForAJobDescription)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className={s.contacts}>\r\n\t\t\t\t\t\t  contacts:\r\n\t\t\t\t\t\t\t{Object.keys(props.dataClientProfile.contacts).map(key=>\r\n\t\t\t\t\t\t\t\t<div key={key} className={s.contacts_item}>{key}: {String(props.dataClientProfile.contacts[key])} </div>)}\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t{props.isOwner&&<button onClick={()=>props.setEditMode(true)}className={s.profilePhoto_button}>Change profile</button>}\r\n\t\t\t\t</div>}\r\n\r\n\t\t\t{props.editMode&&<ProfileInput {...props} initialValues={props.dataClientProfile}/>}\r\n\t</div>\r\n\t)\r\n}\r\n)\r\nexport default Profile;","import React, {useState} from 'react'\r\nimport  s from '../profile.module.css'\r\n\r\nconst UpdataPhotoInput=(props)=>{\r\n    const [selectedPhoto, setSelectedPhoto]=useState(' ')\r\n    \t\r\n    const sendSelectedPhoto=(event)=>{  //!!!!!! argument of function necessarily is (event)\r\n          event.preventDefault()\r\n          props.updataPhoto(selectedPhoto)\r\n        }\r\n\r\n    const onChangeHandlSubmitPhoto = (event) => {\r\n        if (event.target.files[0]) {setSelectedPhoto(event.target.files[0]) }  \r\n   }\r\n\r\n\t return (\r\n    <div className={s.updataPhotoInput_button}>\r\n        <input        \r\n          type=\"file\"\r\n          onChange={onChangeHandlSubmitPhoto}\r\n        />\r\n        <button  onClick={sendSelectedPhoto}>\r\n            Сохранить и закрыть\r\n        </button>\r\n    </div>\r\n  )\r\n}\r\nexport default UpdataPhotoInput\r\n\r\n","import React, {memo} from 'react'\r\nimport  s from '../profile.module.css'\r\nimport UpdataPhotoInput from './UpdataPhotoInput.js'\r\nimport commonСlientPhoto from '../../../images/kisspng.png'\r\n\r\nconst ProfilePhoto =memo((props) =>{\r\n//const sendSelectedPhoto=(event)=>{props.updataPhoto(event.target.files[0])} // version without component\r\n\t\treturn(\r\n\r\n\t<div >\r\n\t\t\t<div className={s.profilePhoto}>\r\n\t\t\t\r\n\t\t\t\t{!!(props.photo)?     // may be an option <img src={props.photo.large || commonСlientPhoto} alt=''/>\r\n\t\t\t\t<img src={props.photo} alt=''/>\r\n\t\t\t\t:<img src={commonСlientPhoto} alt='' />\r\n\t\t\t\t}\r\n\t\t\t</div >\r\n\t\t\t{props.isOwner &&<UpdataPhotoInput {...props}/>}\r\n\t\t\t{/*{isOwner &&<input type=\"file\" onChange={sendSelectedPhoto}/>}   // version without component*/}\r\n\t</div >\r\n\t)\r\n}\r\n)\r\nexport default ProfilePhoto","import React, { useRef, useEffect, memo } from 'react'\r\nimport  s from '../profile.module.css'\r\n\r\nconst StatusRef =memo((props)=>{   \r\n  //  try to do using redux-form with initial Values on start component\t\r\nconst statusRef=useRef(props.profileStatus)\r\n  useEffect(() => {\r\n  \tstatusRef.current.value=props.profileStatus  }, [props.profileStatus]);\r\n\r\nconst setChangedStatus = () =>{\t\t\r\nif(props.isOwner){\r\n\tprops.putStatus(statusRef.current.value)\r\n\t}\r\n\telse {statusRef.current.value=props.profileStatus}\r\n\t}\r\n\r\n    return (\r\n    <div className={s.statusInputForm}>\r\n\t     <label>\r\n\t     \tStatus \r\n\t     </label> \r\n\t\t <div>\t\t    \r\n\t\t\t<input\r\n\t\t\tdefaultValue={props.profileStatus}\r\n\t\t\tref={statusRef}\r\n\t\t    type='text'       \t\t\t\r\n\t\t\tonBlur={setChangedStatus}\r\n\t\t\t/>\r\n\t\t </div>       \r\n     </div>\r\n    )\r\n  }\r\n  )\r\nexport default StatusRef;","import React from 'react'\r\nimport {Navigate } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { Selectors } from '../redux/selectors.js'\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: Selectors.getIsAuth(state),\r\n    isInitial: Selectors.getIsInitial(state)\r\n})\r\nexport const withAuthRedirect = (Component) => {\r\n    const RedirectComponent =(props) => {\r\n       \t\tif (!props.isInitial) return (<div>Loading...</div>)\r\n            if (!props.isInitial || !props.isAuth) return <Navigate   to=\"/login\"  /> \r\n            return <Component {...props} />\r\n        \r\n    }\r\n    \r\n    let ConectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\r\n    return ConectedAuthRedirectComponent\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from \"react-router\";\r\nimport { connect} from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport Profile from './ProfileInputFields/Profile.js';\r\nimport {getClientProfile, getStatus, putStatus,putProfile,updataPhoto} from '../../redux/ProfileReducer.js';\r\nimport Preloader from '../../Common/Preloader/Preloader.js'\r\nimport ProfilePhoto from './ProfilePhoto/ProfilePhoto.js'\r\nimport StatusRef from './Status/StatusRef.js'\r\nimport {withAuthRedirect} from '../../Common/withAuthRedirect.js'\r\n\r\nimport {Selectors} from '../../redux/selectors.js'\r\n\r\n\r\nconst ProfileContainer = (props)=>{\r\n\r\n\tconst profileStatus=( !!props.status)?props.status:'status yok'\t// for component <StatusRef>\r\n\tconst params = useParams()\r\n\tconst clientId=params.userId\r\n\tconst isOwner=(clientId===String(props.myId))?true:false;\r\n\r\n\tconst [editMode, setEditMode]=useState(false)\r\n\tconst {toUpdateProfile,status}={...props}\r\n\tuseEffect(()=>{props.getClientProfile(clientId)},[toUpdateProfile,clientId]) \r\n\tuseEffect(()=>{props.getStatus(clientId)},[status]) \r\n\r\n\tconst onSubmit = (formData) => {\r\n\t\tprops.putProfile(formData)\r\n\t\tsetEditMode (false)\r\n\t\t\t}\r\n\r\nif(props.toggleIsFetchingProfile) \r\n\treturn (<Preloader />)\r\n\treturn (\r\n\r\n\t\t\t<>\t{!!props.dataClientProfile && <ProfilePhoto photo={props.dataClientProfile.photos.large}\r\n\t\t\t\t\t\t\t\t\t isOwner={isOwner} \r\n\t\t\t\t\t\t\t\t\t updataPhoto={props.updataPhoto}\r\n\t\t\t\t\t\t\t\t\t \tclientId={clientId}\r\n\t\t\t\t\t\t\t\t\t />}\r\n{/*realization through useRef*/}\t\t{!editMode && <StatusRef \r\n\t\t\t\t\t\t\t\t\t\tprofileStatus={profileStatus}\r\n\t\t\t\t\t\t\t\t\t\tisOwner={isOwner}\r\n\t\t\t\t\t\t\t\t\t\tputStatus={props.putStatus}\r\n\t\t\t\t\t\t\t\t\t\t  />}\t\r\n\r\n{/*realization through useState*/}\t{/*{!editMode && <Status \r\n\t\t\t\t\t\t\t\t\t\tstatus={status}\r\n\t\t\t\t\t\t\t\t\t\tisOwner={isOwner}\r\n\t\t\t\t\t\t\t\t\t\tputStatus={props.putStatus}\r\n\t\t\t\t\t\t\t\t\t\t  />}\t}\t\t*/}\t\t\t\t\t\t  \t\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<Profile {...props}\r\n\t\t\t\t\t\t\t\t\t\tisOwner={isOwner}\r\n\t\t\t\t\t\t\t\t\t\tclientId={clientId}\r\n\t\t\t\t\t\t\t\t\t\tonSubmit={onSubmit}\r\n\t\t\t\t\t\t\t\t\t\teditMode={editMode}\r\n\t\t\t\t\t\t\t\t\t\tsetEditMode={setEditMode}\r\n\t\t\t\t\t\t\t\t\t\tupdataPhoto={props.updataPhoto}\r\n\t\t\t\t\t\t\t\t\t/>\t\r\n\t\t\t</>\t\t\t\r\n\t\t)\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { \tdataClientProfile:Selectors.getDataClientProfile(state),      \r\n  \t\t\ttoggleIsFetchingProfile:Selectors.getToggleIsFetchingProfile(state),\r\n  \t\t\tstatus:Selectors.getStatus(state),\r\n  \t\t\tmyId:Selectors.getMyId(state),\r\n  \t\t\ttoUpdateProfile:Selectors.getToUpdateProfile(state),\r\n  \t\t\tisAuth:\tSelectors.getIsAuth(state)      \r\n   }\r\n  } \r\n\r\n  export default compose(\r\n    connect(mapStateToProps, {getClientProfile,getStatus,putStatus,putProfile,updataPhoto}),\r\n    withAuthRedirect\r\n\t)(ProfileContainer)\r\n\r\n\r\n"],"names":["reduxForm","form","enableReinitialize","props","onSubmit","handleSubmit","className","s","Field","name","type","component","InputFormModel","label","TextAreaFormModel","Object","keys","dataClientProfile","contacts","map","key","memo","editMode","fullName","lookingForAJob","onChange","checked","String","lookingForAJobDescription","isOwner","onClick","setEditMode","initialValues","Preloader","useState","selectedPhoto","setSelectedPhoto","event","target","files","preventDefault","updataPhoto","photo","src","alt","commonСlientPhoto","statusRef","useRef","profileStatus","useEffect","current","value","defaultValue","ref","onBlur","putStatus","mapStateToPropsForRedirect","state","isAuth","Selectors","isInitial","compose","connect","toggleIsFetchingProfile","status","myId","toUpdateProfile","getClientProfile","getStatus","putProfile","Component","to","clientId","useParams","userId","photos","large","formData"],"sourceRoot":""}